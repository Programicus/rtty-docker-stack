services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-defaultuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
      POSTGRES_DB: ${POSTGRES_DB:-defaultdatabase}
    volumes:
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s  

  worker:
    build:
      context: worker
      additional_contexts:
        - hostetc=/etc
      args:
        POSTGRES_USER: ${POSTGRES_USER:-defaultuser}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
        POSTGRES_DB: ${POSTGRES_DB:-defaultdatabase}
    depends_on:
      db:
        condition: service_healthy
        restart: true
    networks:
      - backend
    devices:
      - /dev/snd:/dev/snd

  node-red:
    build: 
      context: node-red
    ports:
      - "1880:1880"
    volumes:
      - ./data:/data
    networks:
      - backend
      - frontend
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-defaultuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
      POSTGRES_DB: ${POSTGRES_DB:-defaultdatabase}
    depends_on:
      db:
        condition: service_healthy
        restart: true

  web:
    build:
      context: web
      args:
        POSTGRES_USER: ${POSTGRES_USER:-defaultuser}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
        POSTGRES_DB: ${POSTGRES_DB:-defaultdatabase}
    ports:
      - "80:80"
    depends_on:
      node-red:
        condition: service_started
      db:
        condition: service_healthy
        restart: true
    networks:
      - frontend
      - backend

networks:
  frontend:
  backend:
